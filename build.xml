<?xml version="1.0" encoding="UTF-8" ?>

<project name="OPI_Lab3" default="build">
    <property file="build.properties"/>
    <property environment="env"/>

    <path id="classpath">
        <fileset dir="${user.home}/.m2/repository/" includes="**/*.jar"/>
    </path>

    <target name="compile" depends="clean" description="(*) compile the source">
        <mkdir dir="${classes.dir}"/>
        <javac target="${java.ver}" source="${java.ver}" srcdir="${src.dir}" destdir="${classes.dir}" encoding="UTF-8">
            <classpath refid="classpath" />
        </javac>
    </target>

    <target name="build" depends="compile" description="(*) build jar file">
        <jar destfile="${build.dir}/${ant.project.name}.jar" basedir="${classes.dir}" excludes="*Test.class">
            <fileset dir="${main.dir}/resources"/>
            <fileset dir="${main.dir}/webapp"/>
            <manifest>
                <attribute name="Version" value="${project.ver}"/>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>
    </target>

    <target name="test" depends="compile" description="(*) run tests">
        <junit printsummary="on">
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${classes.dir}"/>
            </classpath>
            <test name="${test.class}"/>
            <formatter type="plain" usefile="false"/>
        </junit>
    </target>

    <target name="native2ascii" description="(*) convert properties files to ASCII format using native2ascii">
        <native2ascii src="${main.dir}/resources"
                      dest="${main.dir}/native2ascii"
                      includes="**/*.properties"/>
    </target>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath refid="classpath"/>
    </taskdef>

    <target name="history" description="(*) load previous version from git repository if compilation fails">
        <trycatch>
            <try>
                <antcall target="compile"/>
            </try>
            <catch>
                <load-previous-revision/>
                <exec executable="git" outputproperty="git.curr_commit">
                    <arg value="rev-parse"/>
                    <arg value="HEAD"/>
                </exec>
            </catch>
        </trycatch>
    </target>

    <macrodef name="load-previous-revision">
        <sequential>
            <exec executable="git" outputproperty="git.next_commit">
                <arg value="rev-parse"/>
                <arg value="HEAD"/>
            </exec>
            <exec executable="git" outputproperty="git.reverse_commits">
                <arg value="log"/>
                <arg value="--pretty=oneline"/>
                <arg value="--reverse"/>
            </exec>
            <propertyregex property="git.first_commit" input="${git.reverse_commits}" regexp="(\w+)" select="\1"/>
            <if>
                <not>
                    <equals arg1="${git.first_commit}" arg2="${git.next_commit}"/>
                </not>
                <then>
                    <exec executable="git">
                        <arg value="checkout"/>
                        <arg value="-f"/>
                        <arg value="HEAD^"/>
                    </exec>
                    <trycatch>
                        <try>
                            <antcall target="compile"/>
                            <exec executable="git">
                                <arg value="diff"/>
                                <arg value="${git.next_commit}"/>
                                <redirector output="history_diff.txt"/>
                            </exec>
                            <exec executable="git">
                                <arg value="checkout"/>
                                <arg value="main"/>
                            </exec>
                        </try>
                        <catch>
                            <load-previous-revision/>
                        </catch>
                    </trycatch>
                </then>
            </if>
        </sequential>
    </macrodef>


    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${main.dir}/native2ascii"/>
    </target>
</project>